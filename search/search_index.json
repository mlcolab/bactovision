{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BactoVision","text":""},{"location":"#a-jupyter-widget-for-annotating-and-visualizing-bacterial-growth-data","title":"A Jupyter widget for annotating and visualizing bacterial growth data","text":"<p>BactoVision provides an interactive widget for Jupyter notebook designed for fast semi-automated annotation of bacterial growth images. It combines intuitive manual drawing tools with automatic detection algorithms to make the annotation process efficient and accurate.</p> <p>BactoVision is used in the paper:</p> <p>Tyrosine auxotrophy shapes Staphylococcus aureus nasal colonization and interactions with commensal communities L. Camus et al. 2025 (submitted)</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Jupyter integration - Annotate data directly in Jupyter notebook to enable flexiblility and seamless integration with other python libraries.</li> <li>Grid system - Analyze data in a structured grid format. Unlike other packages, BactoVision does not try to automatically infer the grid from the image, because it is generally an ill-posed task, especially if multiple colonies are not visible. Instead, a user can specify the grid once by manually dragging it in the widget. This this grid configuration can be then saved and reused on images with the same geometry. Grid config also ensures that the saved tables are compatible between different images.</li> <li>Interactive annotation - Combine automatic and manual annotation methods. BactoVision provides a manual brush to add and erase parts of the annotation that were not processed correctly by automated tools.</li> <li>Image enhancement - Apply CLAHE and other image processing techniques.</li> <li>Quantitative analysis - Extract standardized metrics on bacterial growth.</li> <li>Intuitive interface - Simple and user-friendly design.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p><pre><code>from bactovision import BactoWidget\n\n# Create a widget with an image\nwidget = BactoWidget('path/to/image.png')\n\n# Display the widget\nwidget\n</code></pre> </p> <p>To get the mask and the metrics after the annotation is completed, run:</p> <pre><code>annotation_mask = widget.get_annotation_mask()\nmetrics = widget.get_metrics()\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>If you use BactoVision in your research, please cite:</p> <pre><code>Camus L. et al. (2025). Tyrosine auxotrophy shapes Staphylococcus aureus nasal colonization\nand interactions with commensal communities. [Journal pending].\n</code></pre>"},{"location":"installation/","title":"Installation Guide","text":"<p>BactoVision is designed to work within Jupyter notebooks and can be installed via pip. The package is compatible with Python 3.7+ and includes all necessary dependencies.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing BactoVision, ensure you have Python 3.7 or higher.</p>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#standard-installation","title":"Standard Installation","text":"<p>The easiest way to install BactoVision is using pip:</p> <pre><code>pip install bactovision\n</code></pre> <p>This will install BactoVision along with all its dependencies.</p>"},{"location":"installation/#installation-from-source","title":"Installation from Source","text":"<p>For the latest development version or to contribute to the project, you can install from source:</p> <pre><code>git clone https://github.com/mlcolab/bactovision.git\ncd bactovision\npip install .\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that BactoVision is installed correctly, open a Jupyter notebook and run:</p> <pre><code>from bactovision.widget import BactoWidget\n</code></pre> <p>If the installation was successful, this should import the widget class without any errors.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#missing-dependencies","title":"Missing Dependencies","text":"<p>If you encounter errors about missing dependencies, try reinstalling with:</p> <pre><code>pip install bactovision --force-reinstall\n</code></pre>"},{"location":"installation/#jupyterlab-extension-issues","title":"JupyterLab Extension Issues","text":"<p>For JupyterLab users, if the widget doesn't display properly, ensure that the widget extension is installed:</p> <pre><code>jupyter labextension list\n</code></pre> <p>The output should include <code>anywidget</code> or similar entries. If not, you may need to run</p> <pre><code>jupyter labextension install @jupyter-widgets/jupyterlab-manager\n</code></pre> <p>and restart the jupyter server.</p>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you experience any issues with installation, please open an issue on our GitHub repository with details about the problem and your environment.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section provides detailed documentation for BactoVision's API. It covers the main classes and functions that you can use programmatically.</p>"},{"location":"api/#package-structure","title":"Package Structure","text":"<p>BactoVision consists of several main components:</p> <ul> <li>BactoWidget (<code>bactovision.widget.BactoWidget</code>) - The main widget class</li> <li>CanvasWidget (<code>bactovision.canvas_widget.CanvasWidget</code>) - The underlying canvas implementation</li> <li>Image Processing (<code>bactovision.image_processing</code>) - Image processing utilities</li> </ul>"},{"location":"api/#core-classes-overview","title":"Core Classes Overview","text":""},{"location":"api/#bactowidget","title":"BactoWidget","text":"<p>The main user-facing class that integrates all components:</p> <pre><code>from bactovision.widget import BactoWidget\n\nwidget = BactoWidget('path/to/image.png')\n</code></pre> <p>This class provides:</p> <ul> <li>Image loading and display</li> <li>UI controls for annotation</li> <li>Grid configuration</li> <li>Metrics extraction</li> </ul>"},{"location":"api/#canvaswidget","title":"CanvasWidget","text":"<p>The lower-level widget that handles the canvas rendering and interactions:</p> <pre><code>from bactovision.canvas_widget import CanvasWidget\n\ncanvas = CanvasWidget()\ncanvas.set_image(image_array)\n</code></pre> <p>This class provides:</p> <ul> <li>Image rendering</li> <li>Drawing capabilities</li> <li>Annotation storage</li> <li>Grid implementation</li> </ul>"},{"location":"api/#image-processing-utilities","title":"Image Processing Utilities","text":"<p>A collection of functions for processing bacterial growth images:</p> <pre><code>from bactovision.image_processing import segment_by_thresholding, normalize_image\n\n# Segment an image\nimage, mask = segment_by_thresholding(image_array, t=1.0, s=1.0)\n\n# Normalize an image to [0,1] range\nnormalized_img = normalize_image(image_array)\n</code></pre>"},{"location":"api/#detailed-api-documentation","title":"Detailed API Documentation","text":"<p>Each component has detailed documentation available:</p> <ul> <li>BactoWidget - Main widget documentation</li> <li>CanvasWidget - Canvas functionality</li> <li>Image Processing - Image processing functions</li> </ul>"},{"location":"api/#usage-examples","title":"Usage Examples","text":"<p>For example code showing how to use these APIs, see the Examples page.</p>"},{"location":"api/bacto-widget/","title":"BactoWidget API","text":"<p>The <code>BactoWidget</code> class is the main user interface component of BactoVision. It integrates all functionality into a single widget that can be used in Jupyter notebooks.</p> <pre><code>from bactovision.widget import BactoWidget\n</code></pre>"},{"location":"api/bacto-widget/#class-constructor","title":"Class Constructor","text":"<pre><code>BactoWidget(img, mask=None)\n</code></pre>"},{"location":"api/bacto-widget/#parameters","title":"Parameters","text":"<ul> <li>img (<code>numpy.ndarray</code> or <code>str</code> or <code>pathlib.Path</code>): The image to be processed. Can be either a NumPy array or a path to an image file.</li> <li>mask (<code>numpy.ndarray</code>, optional): A pre-existing annotation mask. Default is <code>None</code>.</li> </ul>"},{"location":"api/bacto-widget/#returns","title":"Returns","text":"<p>A BactoWidget instance that can be displayed in a Jupyter notebook.</p>"},{"location":"api/bacto-widget/#example","title":"Example","text":"<pre><code># Create from file path\nwidget = BactoWidget('path/to/image.png')\n\n# Create from NumPy array\nimport numpy as np\nfrom PIL import Image\nimage_array = np.array(Image.open('path/to/image.png'))\nwidget = BactoWidget(image_array)\n\n# With a pre-existing mask\nmask = np.zeros_like(image_array[:,:,0])\nmask[100:200, 100:200] = 1  # Example annotation\nwidget = BactoWidget(image_array, mask=mask)\n</code></pre>"},{"location":"api/bacto-widget/#properties","title":"Properties","text":""},{"location":"api/bacto-widget/#ui-controls","title":"UI Controls","text":""},{"location":"api/bacto-widget/#grid-controls","title":"Grid Controls","text":"<ul> <li>change_grid_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to enable/disable grid adjustment mode.</li> <li>hide_grid_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to show/hide the grid.</li> <li>x_grid_size_slider (<code>ipywidgets.IntSlider</code>): Slider to adjust horizontal grid size.</li> <li>y_grid_size_slider (<code>ipywidgets.IntSlider</code>): Slider to adjust vertical grid size.</li> </ul>"},{"location":"api/bacto-widget/#image-enhancement-controls","title":"Image Enhancement Controls","text":"<ul> <li>clahe_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to enable/disable CLAHE enhancement.</li> <li>clahe_limit_slider (<code>ipywidgets.FloatLogSlider</code>): Slider to adjust CLAHE limit.</li> <li>subtract_background_btn (<code>ipywidgets.ToggleButton</code>): Toggle button for background subtraction.</li> <li>cmap_down (<code>ipywidgets.Dropdown</code>): Dropdown to select the colormap.</li> </ul>"},{"location":"api/bacto-widget/#manual-annotation-controls","title":"Manual Annotation Controls","text":"<ul> <li>draw_mode_btns (<code>ipywidgets.ToggleButtons</code>): Buttons to select drawing mode (Off/Add/Erase).</li> <li>brush_size_slider (<code>ipywidgets.FloatSlider</code>): Slider to adjust brush size.</li> </ul>"},{"location":"api/bacto-widget/#automatic-annotation-controls","title":"Automatic Annotation Controls","text":"<ul> <li>annotate_btn (<code>ipywidgets.Button</code>): Button to trigger automatic annotation.</li> <li>hide_annotation_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to hide/show annotations.</li> <li>threshold_slider (<code>ipywidgets.FloatSlider</code>): Slider to adjust brightness threshold.</li> <li>small_object_size (<code>ipywidgets.FloatSlider</code>): Slider to adjust minimum object size.</li> </ul>"},{"location":"api/bacto-widget/#data-access-properties","title":"Data Access Properties","text":"<ul> <li>mask (<code>numpy.ndarray</code>): The current annotation mask as a binary array.</li> <li>canvas_widget (<code>CanvasWidget</code>): The underlying canvas widget instance.</li> <li>original_img (<code>numpy.ndarray</code>): The original input image.</li> </ul>"},{"location":"api/bacto-widget/#methods","title":"Methods","text":""},{"location":"api/bacto-widget/#get_metricsbrightness_modeluminance-inverse","title":"<code>get_metrics(brightness_mode='luminance-inverse')</code>","text":"<p>Calculates metrics for the annotated image based on the current grid.</p>"},{"location":"api/bacto-widget/#parameters_1","title":"Parameters","text":"<ul> <li>brightness_mode (<code>str</code>, optional): Mode for brightness calculation. Default is 'luminance-inverse'.</li> </ul>"},{"location":"api/bacto-widget/#returns_1","title":"Returns","text":"<ul> <li>A dictionary containing the following metrics:</li> <li>integral_opacity: Total opacity within each grid cell.</li> <li>average_opacity: Average opacity per pixel in each grid cell.</li> <li>relative_area: Proportion of each grid cell that is annotated.</li> <li>num_pixels: Count of annotated pixels in each grid cell.</li> </ul>"},{"location":"api/bacto-widget/#example_1","title":"Example","text":"<pre><code># Get metrics from the widget\nmetrics = widget.get_metrics()\n\n# Access specific metrics\nintegral_opacity = metrics['integral_opacity']\naverage_opacity = metrics['average_opacity']\nrelative_area = metrics['relative_area']\nnum_pixels = metrics['num_pixels']\n</code></pre>"},{"location":"api/bacto-widget/#apply_auto_annotationargs","title":"<code>apply_auto_annotation(*args)</code>","text":"<p>Applies automatic annotation based on the threshold and size settings.</p>"},{"location":"api/bacto-widget/#parameters_2","title":"Parameters","text":"<ul> <li>*args: Unused parameters to maintain compatibility with button callbacks.</li> </ul>"},{"location":"api/bacto-widget/#returns_2","title":"Returns","text":"<ul> <li>None</li> </ul>"},{"location":"api/bacto-widget/#example_2","title":"Example","text":"<pre><code># Configure and run automatic annotation\nwidget.threshold_slider.value = 1.2\nwidget.small_object_size.value = 0.8\nwidget.apply_auto_annotation()\n</code></pre>"},{"location":"api/bacto-widget/#cut_imgimg","title":"<code>cut_img(img)</code>","text":"<p>Cuts the image according to the current grid padding.</p>"},{"location":"api/bacto-widget/#parameters_3","title":"Parameters","text":"<ul> <li>img (<code>numpy.ndarray</code>): The image to cut.</li> </ul>"},{"location":"api/bacto-widget/#returns_3","title":"Returns","text":"<ul> <li>The cut image as a NumPy array.</li> </ul>"},{"location":"api/bacto-widget/#_update_preprocessed_imageargs","title":"<code>_update_preprocessed_image(*args)</code>","text":"<p>Updates the preprocessed image based on current enhancement settings.</p>"},{"location":"api/bacto-widget/#parameters_4","title":"Parameters","text":"<ul> <li>*args: Unused parameters to maintain compatibility with callbacks.</li> </ul>"},{"location":"api/bacto-widget/#returns_4","title":"Returns","text":"<ul> <li>None</li> </ul>"},{"location":"api/bacto-widget/#events-and-callbacks","title":"Events and Callbacks","text":"<p>The BactoWidget sets up numerous event handlers for its controls. The main ones are:</p> <ul> <li>The <code>clahe_btn</code>, <code>clahe_limit_slider</code>, and <code>subtract_background_btn</code> widgets are linked to the <code>_update_preprocessed_image</code> method.</li> <li>The <code>cmap_down</code> dropdown is linked to the <code>_update_image_view</code> method.</li> <li>The <code>draw_mode_btns</code> and <code>brush_size_slider</code> are linked to the Canvas widget.</li> <li>The <code>annotate_btn</code> is linked to the <code>apply_auto_annotation</code> method.</li> <li>The <code>hide_annotation_btn</code> is linked to the <code>_hide_annotation_clicked</code> method.</li> <li>The <code>change_grid_btn</code> is linked to the <code>_change_grid_btn_clicked</code> method.</li> </ul>"},{"location":"api/bacto-widget/#usage-examples","title":"Usage Examples","text":""},{"location":"api/bacto-widget/#basic-usage","title":"Basic Usage","text":"<pre><code>from bactovision.widget import BactoWidget\nimport matplotlib.pyplot as plt\n\n# Create and display the widget\nwidget = BactoWidget('bacteria_image.png')\nwidget  # This displays the widget in the notebook\n\n# After annotation, extract and visualize metrics\nmetrics = widget.get_metrics()\nplt.figure(figsize=(10, 6))\nplt.imshow(metrics['integral_opacity'])\nplt.colorbar()\nplt.title('Integral Opacity')\nplt.show()\n</code></pre>"},{"location":"api/bacto-widget/#programmatic-control","title":"Programmatic Control","text":"<pre><code># Configure grid\nwidget.x_grid_size_slider.value = 10\nwidget.y_grid_size_slider.value = 8\n\n# Enable image enhancements\nwidget.clahe_btn.value = True\nwidget.clahe_limit_slider.value = 200\nwidget.subtract_background_btn.value = True\n\n# Set annotation parameters\nwidget.threshold_slider.value = 1.1\nwidget.small_object_size.value = 0.7\n\n# Run auto-annotation\nwidget.apply_auto_annotation()\n</code></pre> <p>For more examples, see the Examples page.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This section provides comprehensive documentation on how to use BactoVision for annotating and analyzing bacterial growth images.</p>"},{"location":"user-guide/#overview","title":"Overview","text":"<p>BactoVision is designed with a focus on usability and flexibility. It provides both automatic and manual annotation capabilities, allowing researchers to quickly process large numbers of images while maintaining the ability to make fine-grained adjustments when needed.</p> <p>The widget interface is divided into several functional areas:</p> <ol> <li>Preprocessing Controls - Tools for enhancing image quality before annotation</li> <li>Grid Controls - Options for configuring the analysis grid</li> <li>Manual Annotation Tools - Brushes and eraser tools for direct annotation</li> <li>Automatic Annotation - Algorithms for automated detection of bacterial colonies</li> <li>Canvas - The main viewing and interaction area</li> </ol>"},{"location":"user-guide/#basic-workflow","title":"Basic Workflow","text":"<p>A typical workflow using BactoVision follows these steps:</p> <ol> <li>Load an image - Create a BactoWidget with your bacterial growth image</li> <li>Adjust the grid - Set up the grid to match your experimental design (or load the configured grid if the images share the same geometry)</li> <li>Preprocess the image - Enhance contrast and other properties if needed</li> <li>Annotate - Use automatic methods and refine with manual tools</li> <li>Extract data - Get quantitative measurements from your annotations</li> </ol>"},{"location":"user-guide/#guides","title":"Guides","text":"<p>Detailed information about each aspect of BactoVision is available in the following guides:</p> <ul> <li>Basic Usage - Getting started with BactoVision</li> <li>Grid System - Setting the grid</li> <li>Annotations - Methods for annotating bacterial colonies</li> <li>Metrics - Available metrics for analysis</li> </ul>"},{"location":"user-guide/#need-help","title":"Need Help?","text":"<p>If you encounter any issues or have questions about using BactoVision, please open an issue on our GitHub repository.</p>"},{"location":"user-guide/annotations/","title":"Annotations","text":"<p>This guide covers the annotation capabilities in BactoVision, which allow you to mark bacterial colonies within your images.</p>"},{"location":"user-guide/annotations/#fine-tuning-image-before-annotation","title":"Fine-Tuning Image Before Annotation","text":"<p>For better annotation results, consider adjusting the image preprocessing integrated into the widget first:</p> <ol> <li>Enable Contrast Limited Adaptive Histogram Equalization (CLAHE) to enhance contrast</li> <li>Use background subtraction to remove uneven illumination</li> <li>Experiment with different colormaps for better visibility</li> </ol> <p></p> <p>Note that the preprocessing can help with the automatic annotation. However, it is not used for calculating the final metrics - only for the segmentation/annotation process.</p>"},{"location":"user-guide/annotations/#annotation-methods","title":"Annotation Methods","text":"<p>BactoVision offers two complementary annotation approaches:</p> <ol> <li>Automatic annotation - Algorithm-based detection of bacterial colonies</li> <li>Manual annotation - Direct drawing tools for fine-grained control</li> </ol> <p>These approaches can be used individually or in combination to achieve the best results.</p>"},{"location":"user-guide/annotations/#automatic-annotation","title":"Automatic Annotation","text":"<p>The automatic annotation feature uses thresholding techniques to identify bacterial colonies in your images.</p>"},{"location":"user-guide/annotations/#how-it-works","title":"How It Works","text":"<p>The automatic annotation system works through the following steps:</p> <ol> <li>Applies Otsu thresholding with a customizable threshold multiplier</li> <li>Removes small objects below a specified size</li> <li>Clears border objects</li> <li>Creates convex hulls around the identified regions</li> </ol>"},{"location":"user-guide/annotations/#configuring-automatic-annotation","title":"Configuring Automatic Annotation","text":"<p>You can adjust two key parameters to optimize automatic detection:</p>"},{"location":"user-guide/annotations/#brightness-threshold","title":"Brightness Threshold","text":"<p>The \"Brightness threshold\" slider controls the sensitivity of detection:</p> <ul> <li>Higher values (&gt;1.0) - More restrictive detection, only selects very bright colonies</li> <li>Lower values (&lt;1.0) - More inclusive detection, may include background noise</li> </ul>"},{"location":"user-guide/annotations/#smallest-size","title":"Smallest Size","text":"<p>The \"Smallest size\" slider determines the minimum size of colonies to be detected:</p> <ul> <li>Higher values - Ignores smaller colonies</li> <li>Lower values - Includes smaller colonies, but may include noise</li> </ul>"},{"location":"user-guide/annotations/#running-automatic-annotation","title":"Running Automatic Annotation","text":"<p>To apply automatic annotation:</p> <ol> <li>Adjust the threshold and size parameters</li> <li>Click the \"Apply auto\" button</li> <li>Repeat if needed</li> </ol> <p></p>"},{"location":"user-guide/annotations/#manual-annotation","title":"Manual Annotation","text":"<p>Manual annotation allows you to directly draw or erase annotations for precise control.</p>"},{"location":"user-guide/annotations/#annotation-modes","title":"Annotation Modes","text":"<p>The manual annotation system offers three modes:</p> <ul> <li>Off - Disables manual annotation</li> <li>Add - Enables drawing annotations</li> <li>Erase - Enables erasing annotations</li> </ul> <p>The brush size can be adjusted using the corresponding slider.</p> <p></p>"},{"location":"user-guide/annotations/#combined-approach","title":"Combined Approach","text":"<p>For best results, consider using a combined approach:</p> <ol> <li>Start with automatic annotation to quickly identify most colonies</li> <li>Switch to manual annotation to:</li> <li>Add missed colonies</li> <li>Remove false positives</li> <li>Refine boundaries</li> </ol> <p>Note that automatic annotation applied at any stage will erase manual annotation.</p>"},{"location":"user-guide/annotations/#viewing-and-hiding-annotations","title":"Viewing and Hiding Annotations","text":"<p>You can toggle the visibility of annotations using the \"Hide annotation\" button. This is useful when you want to check the original image without annotations.</p>"},{"location":"user-guide/annotations/#extracting-annotation-data","title":"Extracting Annotation Data","text":"<p>After annotation, you can extract the annotation mask:</p> <pre><code># Get binary mask of annotations\nmask = widget.get_annotation_mask()\n\n# Analyze annotations per grid cell\nmetrics = widget.get_metrics()\n</code></pre>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental operations for using BactoVision to analyze bacterial growth images.</p>"},{"location":"user-guide/basic-usage/#getting-started","title":"Getting Started","text":"<p>To begin using BactoVision, you need to import the main widget class and create an instance with your image:</p> <pre><code>from bactovision.widget import BactoWidget\n\n# Create a widget with an image\nwidget = BactoWidget('path/to/your/image.png')\n</code></pre>"},{"location":"user-guide/basic-usage/#loading-images","title":"Loading Images","text":"<p>BactoVision supports various ways to load images:</p> <pre><code># From a file path\nwidget = BactoWidget('path/to/image.png')\n\n# optionally, one can also provide the grid configuration path:\n\nwidget = BactoWidget('path/to/image.png', grid_config='path/to/grid_config.json')\n\n# From a NumPy array\nimport numpy as np\nfrom PIL import Image\n\nimg = np.array(Image.open('path/to/image.png'))\nwidget = BactoWidget(img)\n</code></pre>"},{"location":"user-guide/basic-usage/#grid","title":"Grid","text":"<p>Next, one should set the Grid - either manually or by providing the path to the saved grid configuration.</p>"},{"location":"user-guide/basic-usage/#annotation","title":"Annotation","text":"<p>See the Annotation page for details on the annotation process.</p>"},{"location":"user-guide/basic-usage/#save-metrics","title":"Save metrics","text":"<p>After annotating the image, extract and save the Metrics.</p>"},{"location":"user-guide/grid/","title":"Grid System","text":"<p>BactoVision's grid system is a powerful feature that allows you to analyze bacterial growth in a structured, quantitative manner across different regions of your image.</p>"},{"location":"user-guide/grid/#overview","title":"Overview","text":"<p>The grid system divides your image into a customizable array of cells, enabling:</p> <ul> <li>Systematic comparison of bacterial growth across different regions</li> <li>Quantitative analysis of growth density in each grid cell</li> <li>Structured data extraction for statistical analysis</li> </ul>"},{"location":"user-guide/grid/#basic-grid-concepts","title":"Basic Grid Concepts","text":"<p>A grid in BactoVision consists of:</p> <ul> <li>A configurable number of horizontal (X) and vertical (Y) divisions</li> <li>Adjustable padding around the edges</li> <li>Automatic calculation of metrics for each grid cell</li> </ul>"},{"location":"user-guide/grid/#configuring-the-grid","title":"Configuring the Grid","text":""},{"location":"user-guide/grid/#using-the-ui-controls","title":"Using the UI Controls","text":"<p>The grid can be configured using the grid controls in the top left section. Click Adjust Grid to activate the corresponding mode. If you initialize the widget without providing grid_config, this mode is active by default:</p> <p><pre><code>from bactovision import BactoWidget\n\nwidget = BactoWidget('path/to/image.png')\nwidget\n</code></pre> </p> <p>This view with <code>Adjust grid</code> activated allows you to first the set the correct grid by providing the correct numbers for <code>Columns</code> and <code>Rows</code> in the widget and dragging the edges of the grid manually to set the correct padding.</p> <p></p> <p>After the correct grid is set, click <code>Adjust grid</code> to leave this mode. As a result, the widget will show the cropped version.</p> <p></p>"},{"location":"user-guide/grid/#save-and-load-grid-configuration","title":"Save and load grid configuration","text":"<p>Once the grid is set, you can save it and then reuse on other images with the same geometry:</p> <pre><code># Save the grid configuration\nwidget.save_grid_config('grid_config.json')\n\n# Or get grid config as an object\ngrid_config = widget.get_grid_config()\n\n# ...\n\n# Create new widget with another image\n# and the same grid config\n\nwidget = BactoWidget('path/to/image.png', grid_config='grid_config.json')\n\n# or\n\nwidget = BactoWidget('path/to/image.png', grid_config=grid_config)\n</code></pre>"},{"location":"user-guide/grid/#grid-based-analysis","title":"Grid-Based Analysis","text":"<p>Once your grid is configured and Annotation is complete, BactoVision can calculate various Metrics for each grid cell.</p>"},{"location":"user-guide/metrics/","title":"Metrics","text":""},{"location":"user-guide/metrics/#available-metrics","title":"Available Metrics","text":"<p>After annotating your image, you can get metrics for each grid cell using:</p> <pre><code>metrics = widget.get_metrics()\n</code></pre> <p>This returns a dictionary with the following metrics:</p> <ul> <li>integral_opacity - Total opacity within each grid cell</li> <li>average_opacity - Average opacity per pixel in each grid cell</li> <li>relative_area - Proportion of each grid cell that is annotated</li> <li>num_pixels - Count of annotated pixels in each grid cell</li> </ul> <p>Each metric is returned as a 2D NumPy array matching the grid dimensions.</p>"},{"location":"user-guide/metrics/#visualizing-grid-metrics","title":"Visualizing Grid Metrics","text":"<p>You can visualize these metrics using matplotlib:</p> <pre><code>import matplotlib.pyplot as plt\n\n# Get metrics\nmetrics = widget.get_metrics()\n\n# Visualize integral opacity\nplt.figure(figsize=(10, 8))\nplt.imshow(metrics['integral_opacity'])\nplt.colorbar()\nplt.title('Integral Opacity by Grid Cell')\nplt.show()\n</code></pre>"},{"location":"user-guide/metrics/#saving-results","title":"Saving Results","text":"<p>While BactoVision does not directly save results, you can extract and save the annotation data:</p> <pre><code># Get the annotation mask\nmask = widget.mask\n\n# Save the mask\nfrom PIL import Image\nImage.fromarray((mask * 255).astype('uint8')).save('annotation.png')\n\n# Save metrics to CSV\nimport pandas as pd\nimport numpy as np\n\nmetrics = widget.get_metrics()\ndf = pd.DataFrame({\n    'integral_opacity': metrics['integral_opacity'].flatten(),\n    'average_opacity': metrics['average_opacity'].flatten(),\n    'relative_area': metrics['relative_area'].flatten(),\n})\ndf.to_csv('metrics.csv')\n</code></pre>"}]}